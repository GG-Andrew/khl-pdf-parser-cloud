name: khl_once_new

on:
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      UID: "897694"          # UID матча
      SEASON: "1369"         # сезон
      OUT_DIR: "public/khl/json"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Fetch PDF via curl → parse → write JSON
        run: |
          set -e
          mkdir -p "$OUT_DIR"
          PDF_URL="https://khl.ru/pdf/${{ env.SEASON }}/${{ env.UID }}/game-${{ env.UID }}-start-ru.pdf"
          UA="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"

          curl -sSL --http2 --fail \
            -H "Accept: application/pdf,application/octet-stream;q=0.9,*/*;q=0.8" \
            -H "Accept-Language: ru,en;q=0.9" \
            -H "Referer: https://khl.ru/" \
            -H "User-Agent: $UA" \
            -o /tmp/game.pdf "$PDF_URL"

          python - <<'PY'
          import re, json, pathlib, fitz, os

UID = int(os.environ["UID"])
OUT_DIR = os.environ["OUT_DIR"]

# 1) Читаем PDF
pdf_bytes = pathlib.Path("/tmp/game.pdf").read_bytes()
doc = fitz.open(stream=pdf_bytes, filetype="pdf")
full = "\n".join(p.get_text("text") for p in doc)
doc.close()

def norm(t: str) -> str:
    return re.sub(r"[ \t]+", " ", t.replace("\xa0"," ").replace("\u2009"," ").replace("\u202f"," "))

full = norm(full)
lines = [norm(x) for x in full.splitlines() if x.strip()]
n = len(lines)

# 2) Команды (две строки после «Матч №…»)
teams = [None, None]
try:
    idx_match = next(i for i,l in enumerate(lines) if "Матч" in l)
    take = []
    for l in lines[idx_match+1: idx_match+12]:
        if re.search(r"№|Поз|Фамилия|Начало|Лет|Д\.Р\.|Составы|ДС|г\.", l): 
            continue
        if len(l.strip()) >= 3:
            take.append(l.strip(' "«»'))
        if len(take) == 2:
            break
    if len(take) == 2:
        teams = take
except StopIteration:
    pass

# 3) Время и дата
m_time = re.search(r"Начало матча:\s*(\d{2}:\d{2})", full)
time_msk = m_time.group(1) if m_time else None

dates = re.findall(r"\b(\d{2}\.\d{2}\.\d{4})\b", full)
date = dates[-1] if dates else None  # берём последнюю (из «Обновлено»)

# 4) Главные/линейные судьи — берём 4 последних «Имя Фамилия» в нижнем блоке
name_re = re.compile(r'^[А-ЯЁ][а-яё\-]+(?:\s[А-ЯЁ][а-яё\-]+){1,2}$')
tail_names = [l.strip() for l in lines[-80:] if name_re.match(l.strip())]
tail_names = list(dict.fromkeys(tail_names))  # уникальные в порядке встречи
# часто наверху этого блока бывают ещё «старшие»/резервные — берём последние 4
last4 = tail_names[-4:] if len(tail_names) >= 4 else tail_names
main_referees = last4[:2]
linesmen = last4[2:4] if len(last4) >= 4 else []

# 5) Вратари: ищем строки «В», следующая — ФИО, дальше (если есть) «С/Р»
goalies_all = []
i = 0
while i < n:
    if lines[i].strip() == "В":
        name = lines[i+1].strip() if i+1 < n else ""
        status = ""
        if i+2 < n and lines[i+2].strip() in ("С","Р"):
            status = {"С":"starter", "Р":"reserve"}[lines[i+2].strip()]
            i += 3
        else:
            i += 2
        goalies_all.append({"idx": i, "name": name, "status": status})
    else:
        i += 1

# делим пополам (в PDF две колонки): первая половина — «home», вторая — «away»
half = len(goalies_all)//2
goal_home = [{"name": g["name"], "gk_status": g["status"]} for g in goalies_all[:half]]
goal_away = [{"name": g["name"], "gk_status": g["status"]} for g in goalies_all[half:]]

out = {
  "ok": True,
  "uid": UID,
  "data": {
    "teams": teams,
    "date": date,
    "time_msk": time_msk,
    "main_referees": main_referees,
    "linesmen": linesmen,
    "goalies": {
      "home": goal_home,
      "away": goal_away
    }
  }
}

p = pathlib.Path(OUT_DIR) / f"{UID}.json"
p.parent.mkdir(parents=True, exist_ok=True)
p.write_text(json.dumps(out, ensure_ascii=False, indent=2), encoding="utf-8")
print("Wrote", p)

          PY

      - uses: actions/upload-pages-artifact@v3
        with: { path: ./public }

      - uses: actions/deploy-pages@v4
