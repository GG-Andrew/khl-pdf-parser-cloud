name: khl_once_new

on:
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      UID: "897694"          # UID матча
      SEASON: "1369"         # сезон
      OUT_DIR: "public/khl/json"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Fetch PDF via curl → parse → write JSON
        run: |
          set -e
          mkdir -p "$OUT_DIR"
          PDF_URL="https://khl.ru/pdf/${{ env.SEASON }}/${{ env.UID }}/game-${{ env.UID }}-start-ru.pdf"
          UA="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"

          curl -sSL --http2 --fail \
            -H "Accept: application/pdf,application/octet-stream;q=0.9,*/*;q=0.8" \
            -H "Accept-Language: ru,en;q=0.9" \
            -H "Referer: https://khl.ru/" \
            -H "User-Agent: $UA" \
            -o /tmp/game.pdf "$PDF_URL"

          python - <<'PY'
          import re, json, pathlib, fitz, os, unicodedata

UID = int(os.environ["UID"])
OUT_DIR = os.environ["OUT_DIR"]

def strip_accents(s: str) -> str:
    return ''.join(c for c in unicodedata.normalize('NFD', s) if unicodedata.category(c) != 'Mn')

# 1) Читаем PDF → плоский текст
pdf_bytes = pathlib.Path("/tmp/game.pdf").read_bytes()
doc = fitz.open(stream=pdf_bytes, filetype="pdf")
full = "\n".join(p.get_text("text") for p in doc)
doc.close()

full = strip_accents(full)
lines = [re.sub(r"[ \t]+"," ", x).strip() for x in full.splitlines() if x.strip()]
n = len(lines)

# 2) Команды (строка сразу после "Матч №...")
teams = [None, None]
try:
    i_match = next(i for i,l in enumerate(lines) if "Матч" in l)
    team_line = lines[i_match+1]
    # чаще всего две команды стоят в ряд: пробуем делить по " ХК " или по 2+ пробелам
    if " ХК " in team_line:
        j = team_line.index(" ХК ")
        teams = [team_line[:j].strip(' "«»'), team_line[j+1:].strip(' "«»')]
    else:
        parts = re.split(r"\s{2,}", team_line)
        if len(parts) >= 2:
            teams = [parts[0].strip(' "«»'), parts[1].strip(' "«»')]
except StopIteration:
    pass

# 3) Время/дата (берем дату из "Обновлено:", чтобы не путать с Д.Р. игроков)
m_time = re.search(r"Начало матча:\s*(\d{2}:\d{2})", full)
time_msk = m_time.group(1) if m_time else None

date = None
for l in lines[::-1]:
    if l.startswith("Обновлено:"):
        m = re.search(r"(\d{2}\.\d{2}\.\d{4})", l)
        if m:
            date = m.group(1)
        break

# 4) Судьи: в этом макете есть строка ролей и на следующей — 4 ФИО подряд
main_referees, linesmen = [], []
try:
    i_roles = next(i for i,l in enumerate(lines) if "Главный судья" in l and "Линейный судья" in l)
    ref_line = lines[i_roles+1]
    toks = ref_line.split()
    pairs = [" ".join(toks[k:k+2]) for k in range(0, len(toks), 2)]
    main_referees = pairs[:2]
    linesmen = pairs[2:4] if len(pairs) >= 4 else []
except StopIteration:
    pass

# 5) Вратари: три строки после заголовка "Вратари Вратари", слева и справа по колонке
def parse_goalie_segment(seg: str):
    s = seg
    m_stat = re.search(r"\b([СР])\s?(\d{2}\.\d{2}\.\d{4})", s)
    status = {"С":"starter","Р":"reserve"}.get(m_stat.group(1), "") if m_stat else ""
    m_name = re.search(r"\bВ\s+([A-Za-zА-Яа-яЁё.\- ]+?)\s+[СР]?\s?\d{0,2}\.?\d{0,2}\.?\d{4}", s)
    name = m_name.group(1).strip() if m_name else ""
    name = re.sub(r"\b[А-ЯЁ]\.\s*$", "", name).strip()
    return {"name": name, "gk_status": status}

goal_home, goal_away = [], []
try:
    i_g = next(i for i,l in enumerate(lines) if re.fullmatch(r"Вратари\s+Вратари", l))
    for li in (i_g+1, i_g+2, i_g+3):
        row = lines[li]
        # левая часть до правой колонки (начало правой — " NN В ")
        m = re.search(r"(\d+\s+В\s+.*?)(?=\s+\d+\s+В\s+)", row)
        if not m:
            continue
        left = m.group(1)
        right = row[m.end():]
        goal_home.append(parse_goalie_segment(left))
        goal_away.append(parse_goalie_segment(right))
except Exception:
    pass

out = {
  "ok": True,
  "uid": UID,
  "data": {
    "teams": teams,
    "date": date,
    "time_msk": time_msk,
    "main_referees": main_referees,
    "linesmen": linesmen,
    "goalies": { "home": goal_home, "away": goal_away }
  }
}

p = pathlib.Path(OUT_DIR) / f"{UID}.json"
p.parent.mkdir(parents=True, exist_ok=True)
p.write_text(json.dumps(out, ensure_ascii=False, indent=2), encoding="utf-8")
print("Wrote", p)


          PY

      - uses: actions/upload-pages-artifact@v3
        with: { path: ./public }

      - uses: actions/deploy-pages@v4
