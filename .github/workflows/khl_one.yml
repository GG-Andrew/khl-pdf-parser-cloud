name: KHL ONE — make JSON

on:
  workflow_dispatch:
    inputs:
      UID:
        description: KHL match UID
        required: true
        default: "897694"
      SEASON:
        description: KHL season code
        required: true
        default: "1369"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: Build public artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install poppler-utils (pdftotext)
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils
          python -m pip install --upgrade pip

      - name: Fetch PDF
        env:
          UID: ${{ inputs.UID }}
          SEASON: ${{ inputs.SEASON }}
        run: |
          set -e
          mkdir -p public/khl/json public/khl/raw
          PDF_URL="https://khl.ru/pdf/${SEASON}/${UID}/game-${UID}-start-ru.pdf"
          UA="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
          curl -sSL --http2 --fail \
            -H "Accept: application/pdf,application/octet-stream;q=0.9,*/*;q=0.8" \
            -H "Accept-Language: ru,en;q=0.9" \
            -H "Referer: https://khl.ru/" \
            -H "User-Agent: $UA" \
            -o /tmp/game.pdf "$PDF_URL"
          pdftotext -layout -nopgbrk /tmp/game.pdf public/khl/raw/${UID}_game.txt
          tail -n 150 public/khl/raw/${UID}_game.txt > public/khl/raw/${UID}_tail150.txt

      - name: Parse → JSON (teams / date / time / referees)
        env:
          UID: ${{ inputs.UID }}
        run: |
          python - <<'PY'
          import re, json, os, unicodedata, datetime as dt
          uid = os.environ["UID"]
          txt = f"public/khl/raw/{uid}_game.txt"
          with open(txt, encoding="utf-8", errors="ignore") as f:
              raw = f.read()

          def norm(s: str) -> str:
              s = unicodedata.normalize("NFKC", s)
              s = s.replace("\xa0"," ").replace("\u2009"," ").replace("\u202f"," ")
              return re.sub(r"[ \t]+"," ", s).strip()

          lines = [norm(x) for x in raw.splitlines() if x.strip()]
          full  = "\n".join(lines)

          # TEAMS (title style)
          teams = [None, None]
          m = re.search(r'^\s*([A-ZА-ЯЁ„«»" .\-]+?)\s+(?:ХК\s+)?(?:–|-|—)\s+([A-ZА-ЯЁ„«»" .\-]+?)\s*$', full, re.M|re.I)
          if not m and len(lines) > 5:
              # fallback на строку с названиями
              m = re.search(r'^\s*([A-ЯЁA-Z][^0-9\n]+?)\s+[A-ЯЁA-Z][^0-9\n]+$', lines[5])
          if m:
              teams = [m.group(1).strip(' «»"'), m.group(2).strip(' «»"')]

          # TIME
          mt = re.search(r'Начало матча:\s*(\d{2}:\d{2})', full)
          if not mt:
              mt = re.search(r'MSK[: ]+(\d{2}:\d{2})', full)
          time_msk = mt.group(1) if mt else None

          # DATE
          cand = re.findall(r'\b(\d{2}[./-]\d{2}[./-]\d{4})\b', full)
          def to_dt(s):
              s = s.replace('/','.').replace('-','.')
              try: return dt.datetime.strptime(s, '%d.%m.%Y')
              except: return None
          dates = [d for d in (to_dt(x) for x in cand) if d and 2024 <= d.year <= 2030]
          date = dates[-1].strftime('%d.%m.%Y') if dates else None

          # REFEREES (4 ФИО в двух ролях)
          main_referees, linesmen = [], []
          for i, l in enumerate(lines[:160]):
              if 'Главный судья' in l and 'Линейный судья' in l:
                  pool = " ".join(lines[i:i+3])
                  names = re.findall(r'[А-ЯЁ][а-яё]+ [А-ЯЁ][а-яё]+', pool)
                  main_referees = names[:2]
                  linesmen      = names[2:4]
                  break

          out = {
              "ok": True,
              "uid": int(uid),
              "data": {
                  "teams": teams,
                  "date": date,
                  "time_msk": time_msk,
                  "main_referees": main_referees,
                  "linesmen": linesmen,
                  "goalies": {"home": [], "away": []}  # в этой версии не парсим таблицу
              }
          }
          os.makedirs("public/khl/json", exist_ok=True)
          with open(f"public/khl/json/{uid}.json", "w", encoding="utf-8") as f:
              json.dump(out, f, ensure_ascii=False, indent=2)
          PY

      - name: Upload artifact (public)
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
